// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       String @id @default(uuid())
  username String @unique
  password String

  // Optionals (updated after registration, when filling background information)
  name        String
  birthDate   DateTime
  gender      String
  totalPoints Int      @default(0)

  // Todo, tambahin sesuai kebutuhan konteks

  gamblingStory    String
  gamblingDuration Int    @default(0)
  whyStop          String

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  DailyTask   DailyTask[]
  DebtManager DebtManager[]
  Review      Review?
}

model DailyTask {
  id              String  @id @default(uuid())
  taskName        String
  taskPoints      Int
  taskDescription String
  taskStatus      Boolean @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum TransactionType {
  DEBT
  PAYMENT
}

model DebtManager {
  id     String          @id @default(uuid())
  type   TransactionType // DEBT or PAYMENT
  amount Int
  note   String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Review {
  id          String   @id @default(uuid())
  review      String
  // Scale of 5
  rating      Float
  isAnonymous Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}
